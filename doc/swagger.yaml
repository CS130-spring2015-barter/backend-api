swagger: "2.0"
info:
  version: 0.1.0
  title: Barter API
host: barter.elasticbeanstalk.com
paths:
  /item/geo:
    get:
      produces:
        - application/json
      parameters:
        - name: lat
          in: query
          required: true
          type: number
          format: double
        - name: long
          in: query
          required: true
          type: number
          format: double
        - name: max_items
          description: Maximum number of items to return
          type: integer
          required: false
          in: query
      description: "Fetches geographically sorted items that a given user hasn't seen. If not specified, maximum number of items returned will be 20"
      tags:
        - item
      responses:
        "200":
          description: OK
          schema:
            title: items
            type: array
            items:
              $ref: "#/definitions/Item"
        "400":
          description: Invalid Input
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authentication Error
          schema:
            $ref: "#/definitions/Error"
      security:
        - user_token: []
  /item:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: item_info
          required: true
          schema:
            $ref: "#/definitions/Item"
      description: Creates a new item posting
      tags:
        - item
      responses:
        "200":
          description: OK
          schema:
            type: object
            title: CreatedItem
            properties:
              item_id:
                type: integer
        "400":
          description: Invalid Input
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authentication Error
          schema:
            $ref: "#/definitions/Error"
      security:
        - user_token: []
  "/item/{item_id}":
    get:
      produces:
        - application/json
      description: Retrieves info for an item by id
      tags:
        - item
      parameters:
        - in: path
          name: item_id
          description: ID of item to retrieve info
          required: true
          type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/Item"
        "400":
          description: Invalid Input
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authentication Error
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Item doesn't exist"
          schema:
            $ref: "#/definitions/Error"
      security:
        - user_token: []
    put:
      consumes:
        - application/json
      produces:
        - application/json
      description: Updates an existing item posting
      parameters:
        - in: path
          name: item_id
          description: ID of item to update
          required: true
          type: string
        - in: body
          name: item_info
          required: true
          schema:
            $ref: "#/definitions/Item"
      tags:
        - item
      responses:
        "200":
          description: OK
        "400":
          description: Invalid Input
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authentication Error
          schema:
            $ref: "#/definitions/Error"
      security:
        - user_token: []
    delete:
      description: "Removes a user's previously posted item"
      parameters:
        - in: path
          name: item_id
          description: ID of item to delete
          required: true
          type: string
      tags:
        - item
      responses:
        "200":
          description: OK
        "400":
          description: Invalid Input
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authentication Error
          schema:
            $ref: "#/definitions/Error"
      security:
        - user_token: []
  /item/liked:
    get:
      produces:
        - application/json
      description: Retrieves up to n item ids that have been liked by a user. n defaults to 20.
      tags:
        - item
      parameters:
        - in: query
          required: true
          name: user_id
          type: number
          format: integer
          description: id of user to retrieve liked items for
        - in: query
          required: false
          name: "n"
          description: max liked item ids to return
          type: number
          format: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/ItemIds"
        "400":
          description: Invalid Input
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authentication Error
          schema:
            $ref: "#/definitions/Error"
      security:
        - user_token: []
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          required: true
          name: items
          schema:
            $ref: "#/definitions/Liked"
      description: "Adds items that have been \"liked\" by a user."
      tags:
        - item
      responses:
        "200":
          description: OK
        "400":
          description: Invalid Input
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authentication Error
          schema:
            $ref: "#/definitions/Error"
      security:
        - user_token: []
  /item/seen:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      description: "Adds items that have been \"seen\" by a user."
      tags:
        - item
      responses:
        "200":
          description: OK
        "400":
          description: Invalid In
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authentication Error
          schema:
            $ref: "#/definitions/Error"
      security:
        - user_token: []
  /user:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      description: Registers a new user.
      tags:
        - user
      responses:
        "200":
          description: User registered
          schema:
            $ref: "#/definitions/LoginSuccess"
        "400":
          description: Invalid Input
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authentication Error
          schema:
            $ref: "#/definitions/Error"
  "/user/{user_id}":
    get:
      produces:
        - application/json
      description: Gets information for a user
      tags:
        - user
      parameters:
        - in: path
          name: user_id
          description: ID of user to fetch
          required: true
          type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/UserInfo"
        "400":
          description: Invalid Input
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authentication error
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: No such user
          schema:
            $ref: "#/definitions/Error"
      security:
        - user_token: []
    put:
      consumes:
        - application/json
      produces:
        - application/json
      description: "Edits a user's information"
      parameters:
        - in: path
          name: user_id
          description: ID of user to edit
          required: true
          type: string
        - in: body
          name: user_info
          required: true
          schema:
            $ref: "#/definitions/UserEdit"
      tags:
        - user
      responses:
        "200":
          description: OK
        "400":
          description: Invalid Input
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authentication Error
          schema:
            $ref: "#/definitions/Error"
      security:
        - user_token: []
    delete:
      description: Removes a user
      parameters:
        - in: path
          name: user_id
          description: ID of user to delete
          required: true
          type: string
      tags:
        - user
      responses:
        "200":
          description: OK
        "400":
          description: Invalid Input
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authentication Error
          schema:
            $ref: "#/definitions/Error"
      security:
        - user_token: []
  "/user/{user_id}/item":
    get:
      produces:
        - application/json
      description: Retrieves items for a user
      tags:
        - user
      parameters:
        - in: path
          name: user_id
          description: ID of user to fetch items for
          required: true
          type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/ItemIds"
        "400":
          description: Invalid Input
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authentication error
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: No such user
          schema:
            $ref: "#/definitions/Error"
  /user/login:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user_credentials
          in: body
          required: true
          schema:
            $ref: "#/definitions/UserLogin"
      description: Creates a new user session
      tags:
        - user
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/LoginSuccess"
        "401":
          description: Authentication failure
          schema:
            $ref: "#/definitions/Error"
      security:
        - user_token: []
  /user/logout:
    post:
      description: Terminates the current user session. Determines user based on Auth token
      tags:
        - user
      responses:
        "200":
          description: OK
        "401":
          description: Invalid session
          schema:
            $ref: "#/definitions/Error"
      security:
        - user_token: []
  /chat/authenticate:
    post:
      description: Generates a Layer jwt token for the user
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: body
          required: true
          name: LayerAuthReq
          schema:
            $ref: "#/definitions/LayerAuthReq"
      tags:
        - chat
      responses:
        "200":
          description: OK
          schema:
            type: object
            title: AuthResponse
            required:
              - layer_token
            properties:
              layer_token:
                type: string
        "400":
          description: Invalid Input
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: Authentication error
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: No such user
          schema:
            $ref: "#/definitions/Error"
      security:
        - user_token: []
      
definitions:
  Item:
    type: object
    required:
      - user_id
      - item_id
      - item_title
      - item_description
      - item_image
    properties:
      item_id:
        type: string
      user_id:
        type: string
      item_title:
        type: string
      item_description:
        type: string
      item_image:
        type: string
        format: byte
  Liked:
    required:
      - item_ids
    properties:
      item_ids:
        type: array
        items:
          type: string
  User:
    required:
      - first_name
      - last_name
      - email
      - password
      - latitude
      - longitude
    properties:
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
      password:
        type: string
      latitude:
        type: number
        format: double
      longitude:
        type: number
        format: double
      about_me:
        type: string
      user_image:
        type: string
        format: byte
  UserEdit:
    properties:
      first_name:
        type: string
        minimum: 0
      last_name:
        type: string
        minimum: 0
      email:
        type: string
        minimum: 0
      password:
        type: string
        minimum: 0
      latitude:
        type: number
        format: double
        minimum: 0
      longitude:
        type: number
        format: double
        minimum: 0
      about_me:
        type: string
        minimum: 0
      user_image:
        type: string
        format: byte
        minimum: 0
  UserInfo:
    properties:
      first_name:
        type: string
        minimum: 0
      last_name:
        type: string
        minimum: 0
      email:
        type: string
        minimum: 0
      latitude:
        type: number
        format: double
        minimum: 0
      longitude:
        type: number
        format: double
        minimum: 0
      about_me:
        type: string
        minimum: 0
      user_image:
        type: string
        format: byte
        minimum: 0
  LoginSuccess:
    properties:
      token:
        type: string
      user_id:
        type: string
  UserLogin:
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string
  ItemIds:
    required:
      - item_ids
    type: object
    properties:
      item_ids:
        type: array
        items:
          type: integer
  LayerAuthReq:
    type: object
    required:
      - user_id
      - nonce
    title: LayerAuthReq
    properties:
      user_id:
        type: integer
      nonce:
        type: integer
  Error:
    properties:
      message:
        type: string
        description: Details about the error that occurred
securityDefinitions:
  user_token:
    type: apiKey
    name: Authorization
    in: header
